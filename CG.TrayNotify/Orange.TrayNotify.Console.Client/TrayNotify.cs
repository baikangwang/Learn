//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CG.TrayNotify.Common.Contract
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileEventArgs", Namespace="http://schemas.datacontract.org/2004/07/CG.TrayNotify.Common.Contract")]
    public partial class FileEventArgs : System.EventArgs, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.IO.WatcherChangeTypes ChangeTypeField;
        
        private System.DateTime DateField;
        
        private string FileNameField;
        
        private string FolderField;
        
        private System.Guid IdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.WatcherChangeTypes ChangeType
        {
            get
            {
                return this.ChangeTypeField;
            }
            set
            {
                this.ChangeTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date
        {
            get
            {
                return this.DateField;
            }
            set
            {
                this.DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Folder
        {
            get
            {
                return this.FolderField;
            }
            set
            {
                this.FolderField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
    }
}
namespace System.IO
{
    using System;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.FlagsAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="WatcherChangeTypes", Namespace="http://schemas.datacontract.org/2004/07/System.IO")]
    public enum WatcherChangeTypes : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Created = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Deleted = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Changed = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Renamed = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 15,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="ITrayNotify", CallbackContract=typeof(ITrayNotifyCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface ITrayNotify
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Register", ReplyAction="http://tempuri.org/ITrayNotify/RegisterResponse")]
    void Register(System.Guid instanceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Register", ReplyAction="http://tempuri.org/ITrayNotify/RegisterResponse")]
    System.Threading.Tasks.Task RegisterAsync(System.Guid instanceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/UnRegister", ReplyAction="http://tempuri.org/ITrayNotify/UnRegisterResponse")]
    void UnRegister(System.Guid instanceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/UnRegister", ReplyAction="http://tempuri.org/ITrayNotify/UnRegisterResponse")]
    System.Threading.Tasks.Task UnRegisterAsync(System.Guid instanceId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Start", ReplyAction="http://tempuri.org/ITrayNotify/StartResponse")]
    void Start(System.Guid instanceId, string folderToMonitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Start", ReplyAction="http://tempuri.org/ITrayNotify/StartResponse")]
    System.Threading.Tasks.Task StartAsync(System.Guid instanceId, string folderToMonitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Stop", ReplyAction="http://tempuri.org/ITrayNotify/StopResponse")]
    void Stop(System.Guid instanceId, string folderToMonitor);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/Stop", ReplyAction="http://tempuri.org/ITrayNotify/StopResponse")]
    System.Threading.Tasks.Task StopAsync(System.Guid instanceId, string folderToMonitor);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITrayNotifyCallback
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITrayNotify/OnFileChangeEvent", ReplyAction="http://tempuri.org/ITrayNotify/OnFileChangeEventResponse")]
    void OnFileChangeEvent(CG.TrayNotify.Common.Contract.FileEventArgs e);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ITrayNotifyChannel : ITrayNotify, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class TrayNotifyClient : System.ServiceModel.DuplexClientBase<ITrayNotify>, ITrayNotify
{
    
    public TrayNotifyClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public TrayNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public TrayNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public TrayNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public TrayNotifyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public void Register(System.Guid instanceId)
    {
        base.Channel.Register(instanceId);
    }
    
    public System.Threading.Tasks.Task RegisterAsync(System.Guid instanceId)
    {
        return base.Channel.RegisterAsync(instanceId);
    }
    
    public void UnRegister(System.Guid instanceId)
    {
        base.Channel.UnRegister(instanceId);
    }
    
    public System.Threading.Tasks.Task UnRegisterAsync(System.Guid instanceId)
    {
        return base.Channel.UnRegisterAsync(instanceId);
    }
    
    public void Start(System.Guid instanceId, string folderToMonitor)
    {
        base.Channel.Start(instanceId, folderToMonitor);
    }
    
    public System.Threading.Tasks.Task StartAsync(System.Guid instanceId, string folderToMonitor)
    {
        return base.Channel.StartAsync(instanceId, folderToMonitor);
    }
    
    public void Stop(System.Guid instanceId, string folderToMonitor)
    {
        base.Channel.Stop(instanceId, folderToMonitor);
    }
    
    public System.Threading.Tasks.Task StopAsync(System.Guid instanceId, string folderToMonitor)
    {
        return base.Channel.StopAsync(instanceId, folderToMonitor);
    }
}
